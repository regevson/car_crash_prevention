crash-settings:

---------------------------------------
CarModule.calc_straight_drive((5.0, 2.0, 1.0, 0.0, 0.4, CarModule.ω, 80.0), ll_drivepath_c1)

CarModule.calc_straight_drive((5.0, 8.0, 1.0, 0.0, 0.0001, 0.0, 55.0), ll_drivepath_c2)

att-rad = 8
dan-rad = 3
---------------------------------------
CarModule.calc_straight_drive((5.0, 2.0, 1.0, 0.0, 0.7, CarModule.ω, 70.0), ll_drivepath_c1)

CarModule.calc_straight_drive((5.0, 8.0, 1.0, 0.0, 0.0001, 0.0, 40.0), ll_drivepath_c2)


att-rad = 8
dan-rad = 5
safe-space = 3
---------------------------------------



NR:


pass time to crash
calc bremsweg with current velocity -> we now habe coordinates of stop point
calc if stop point is inside threat-radius
if outside: -> simulate breaking linearly to this point

if inside: try acceleration
if inside: try driving to right














JULIA-cheat-sheet:
things are passed by reference and received as value:

arr = [22,22,22]
[22,22,22]

f(x)
	x = [1,2,3]
	return true
end


f(arr)
true

arr
[22,22,22]

-> a pointer to arr is stored in (new allocated) variable x


setindex!(arr, val, index)
A = Array{Float64}(values, rows, cols) -> if multi-dimensional
A = Array{Float64}(values, rows) -> if one-dimensional

append!(arr, val) -> @arr is not empty and @val is appended to end of @arr







CONCEPT: 
_________________________________
                  | A |
---------------------------------
_____| B |________________________

cars drive parallel -> A suddenly crashes into B -> B tries to evade crash

Human controls car with:
- gas -> velocity
- steering wheel -> 
- brake -> velocity

Car has:
velocity
tilta

Prediciton equations:
CTRA-Model:
x(t+T) = (v/w * sin(wT+O) - v/w * sin(O) + x(t))
         (-v/w * cos(wT+O) + v/w * sin(O) + y(t))
         (             wT + O                   )
         (                w                     )

v... velocity
w... yaw rate
O... yaw angle
O' = w

paint__car: changed array from 4 to 1
drive_car: added car.drive_path




TODO:

[ ] paint predicted trajectory with lines starting from head of car
[ ] change trajectory of car that is being attacked
[ ] make changing angle, velocity more user friendly
[ ] use LinkedList instead of Queue -> to avoid having to deepclone to iterate
[ ] make point that indicates braking-distance








