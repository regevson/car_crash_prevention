JULIA-cheat-sheet:
things are passed by reference and received as value:

arr = [22,22,22]
[22,22,22]

f(x)
	x = [1,2,3]
	return true
end


f(arr)
true

arr
[22,22,22]

-> a pointer to arr is stored in (new allocated) variable x


setindex!(arr, val, index)
A = Array{Float64}(values, rows, cols) -> if multi-dimensional
A = Array{Float64}(values, rows) -> if one-dimensional

append!(arr, val) -> @arr is not empty and @val is appended to end of @arr







CONCEPT: 
_________________________________
                  | A |
---------------------------------
_____| B |________________________

cars drive parallel -> A suddenly crashes into B -> B tries to evade crash

Human controls car with:
- gas -> velocity
- brake -> velocity
- steering wheel -> yaw angle, yaw rate

Prediciton equations:
CTRA-Model:
x(t+T) = (v/w * sin(wT+O) - v/w * sin(O) + x(t))
         (-v/w * cos(wT+O) + v/w * sin(O) + y(t))
         (             wT + O                   )
         (                w                     )

v... velocity
w... yaw rate
O... yaw angle
O' = w


TODO:

[x] paint predicted trajectory with lines starting from head of car
[x] make changing angle, velocity more user friendly
[x] use LinkedList instead of Queue -> to avoid having to deepclone to iterate
[x] make point that indicates braking-distance
[x] if safety-distance cannot be upheld, then brake sideways
[ ] try driving cars in front of each other and see if car behind maintains 
		safety-distance
[ ] (Adaptive cruise-control): monitor speed of car in front and drive this particular speed





crash-settings:

---------------------------------------



---------------------------------------



NR:


pass time to crash
calc bremsweg with current velocity -> we now habe coordinates of stop point
calc if stop point is inside threat-radius
if outside: -> simulate breaking linearly to this point

if inside: try acceleration
if inside: try driving to right


Emergency brake:
- draw optimal trajectory with max_braking_rate and max_angle
- car tries to follow optimal trajectory as close as possible

Adaptive cruise-control:
- monitor speed of car in front and drive this particular speed

Lane-changing:


	





